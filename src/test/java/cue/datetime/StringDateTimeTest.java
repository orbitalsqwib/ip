// Test initially generated by Copilot AI
// Prompt used: Please write a JUnit test for the following class: [StringDateTime] class
// The output was cleaned up and fixed by human hands

package cue.datetime;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;

public class StringDateTimeTest {

    @Test
    public void constructor_validDatenoTime_parsesCorrectly() {
        StringDateTime sdt = new StringDateTime("2024-6-10");
        assertFalse(sdt.toLocalDateTime() == null);
        assertFalse(sdt.encode() == null);
        assertFalse(sdt.toString().isEmpty());
        assertEquals(LocalDateTime.of(2024, 6, 10, 0, 0), sdt.toLocalDateTime());
    }

    @Test
    public void constructor_validDatewithTime_parsesCorrectly() {
        StringDateTime sdt = new StringDateTime("2024-6-10@1530");
        assertEquals(LocalDateTime.of(2024, 6, 10, 15, 30), sdt.toLocalDateTime());
    }

    @Test
    public void constructor_invalidDate_isPlainString() {
        StringDateTime sdt = new StringDateTime("not-a-date");
        assertNull(sdt.toLocalDateTime());
        assertEquals("not-a-date", sdt.encode());
        assertEquals("not-a-date", sdt.toString());
    }

    @Test
    public void isBefore_isAfterisEqual_validDate() {
        StringDateTime sdt = new StringDateTime("2024-6-10@1530");
        LocalDateTime before = LocalDateTime.of(2024, 6, 10, 15, 29);
        LocalDateTime same = LocalDateTime.of(2024, 6, 10, 15, 30);
        LocalDateTime after = LocalDateTime.of(2024, 6, 10, 15, 31);

        assertFalse(sdt.isBefore(before));
        assertTrue(sdt.isBefore(after));
        assertTrue(sdt.isEqual(same));
        assertTrue(sdt.isAfter(before));
        assertFalse(sdt.isAfter(after));
    }

    @Test
    public void isBefore_isAfterisEqual_plainString() {
        StringDateTime sdt = new StringDateTime("plain");
        LocalDateTime dt = LocalDateTime.now();
        assertFalse(sdt.isBefore(dt));
        assertFalse(sdt.isAfter(dt));
        assertFalse(sdt.isEqual(dt));
    }

    @Test
    public void daysTill_validDate_positiveNegativeZero() {
        StringDateTime sdt = new StringDateTime("2024-6-10@1530");
        LocalDateTime later = LocalDateTime.of(2024, 6, 12, 15, 30); // +2 days
        LocalDateTime earlier = LocalDateTime.of(2024, 6, 8, 15, 30); // -2 days
        LocalDateTime same = LocalDateTime.of(2024, 6, 10, 15, 30); // 0 days

        assertEquals(Long.valueOf(2), sdt.daysTill(later));
        assertEquals(Long.valueOf(-2), sdt.daysTill(earlier));
        assertEquals(Long.valueOf(0), sdt.daysTill(same));
    }

    @Test
    public void daysTill_validDate_fractionalRoundsUpOrDown() {
        StringDateTime sdt = new StringDateTime("2024-6-10@1530");
        LocalDateTime plusHalfDay = LocalDateTime.of(2024, 6, 11, 3, 30); // +12 hours = 0.5 days
        LocalDateTime minusHalfDay = LocalDateTime.of(2024, 6, 10, 3, 30); // -12 hours = -0.5 days

        assertEquals(Long.valueOf(1), sdt.daysTill(plusHalfDay));
        assertEquals(Long.valueOf(-1), sdt.daysTill(minusHalfDay));
    }

    @Test
    public void daysTill_plainString_returnsNull() {
        StringDateTime sdt = new StringDateTime("plain");
        assertNull(sdt.daysTill(LocalDateTime.now()));
    }

    @Test
    public void encode_returnsOriginalString() {
        StringDateTime sdt = new StringDateTime("2024-6-10@1530");
        assertEquals("2024-6-10@1530", sdt.encode());
    }

    @Test
    public void toLocalDateTime_validAndInvalid() {
        StringDateTime valid = new StringDateTime("2024-6-10@1530");
        StringDateTime invalid = new StringDateTime("plain");
        assertNotNull(valid.toLocalDateTime());
        assertNull(invalid.toLocalDateTime());
    }

    @Test
    public void toString_validDate_withTime() {
        StringDateTime sdt = new StringDateTime("2024-6-10@1530");
        assertEquals("Jun 10 2024 @ 03:30pm", sdt.toString());
    }

    @Test
    public void toString_validDate_noTime() {
        StringDateTime sdt = new StringDateTime("2024-6-10");
        assertEquals("Jun 10 2024", sdt.toString());
    }

    @Test
    public void toString_plainString() {
        StringDateTime sdt = new StringDateTime("plain");
        assertEquals("plain", sdt.toString());
    }
}
